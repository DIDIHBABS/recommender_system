# -*- coding: utf-8 -*-
"""recommnder_system.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HaFpdT0Q9Bqa00CCd18PmoQYQdXMyA4W
"""

pip install surprise

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from surprise import SVD
from surprise import Dataset, Reader
from surprise. model_selection import cross_validate


from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

ratings = pd.read_csv("/content/drive/MyDrive/Colab Notebooks/Recommender System /archive (3)/rating.csv")
movies = pd.read_csv("/content/drive/MyDrive/Colab Notebooks/Recommender System /archive (3)/movie.csv")

movie_rating = pd.merge(ratings, movies, on="movieId")

movies.head()

movie_rating.head()

movie_rating.describe()

movie_rating['rating'].unique()

"""#Collaborative Filtering with Surprise Library"""

reader = Reader(rating_scale=(0.5,5))
data =Dataset.load_from_df(movie_rating[['userId','movieId','rating']], reader)

print(data)

model = SVD()
cross_validate(model, data, measures=['RMSE', 'MAE'], cv=5, verbose=True)

"""#Content-Based Filtering with Scikit-Learn

"""

tfidf = TfidfVectorizer(stop_words='english')
tfidf_matrix = tfidf.fit_transform(movies['plot'])
cosine_sim_matix = cosine_similarity(tfidf_matrix, tfidf_matrix)

def get_simillar_movies(movie_id, n):
    movie_index = movies[movies['movieId'] == movie_id].index[0]
    movie_score = list(enumerate(cosine_sim_matix[movie_index]))
    sorted_movies = sorted(movie_score, key=lambda x: x[1], reverse=True)

    top_movies = []
    for i in range(1, n+1):
      top_movies.append(movies.iloc[sorted_movies[i][0]])
      return top_movies

"""#Hybrid"""

def get_cf_rec(user_id, n):
  user_movies = movie_rating[movie_rating['user_id'] == user_id]

  reader = Reader(rating_scale = (0.5, 5))
  data =Dataset.load_from_df(user_movies[['userId','movieId','rating']], reader)
  model = SVD()
  trainset = data.build_full_trainset()
  model.fit(trainset)

  movie_ids = [movie_rating['movieId'].uniqe()]
  for movie_id in user_movies['movieId']:

def get_cb_recc(user_ib, n):
  user_movies = movie_rating[movie_rating['user_id'] == user_id]

  cosine_sim_matix = cosine_similarity(tfidf_matrix, tfidf_matrix)

def get_hybrid_recc(user_id, n):
    cf_recommendation = get_cf_rec(user_id, n*2)
    cb_recommendation = get_cb_rec(user_id, n*2)

    hybrid_recc = pd.concat([cf_recommendation, cb_recommendation]).groupby
    (["title", "genres"])['title'].count().reset_index(name='count').sort_values(['count'], ascending=False).head(n)

    return hybrid_recc[['title', 'genres']]













